//Include delay milliseconds() library
#include <util/delay.h>
/*
--David Afolabi
--Date: 21st January, 2021
--Purpose: To design a game that allows the user to win 
by pressing a button when the corresponding LED is on. 
*/
//initialize counter 
int counter;
//array of LEDs
int ledPins[9] = {PORTC0, PORTC1, PORTC2, PORTC3, PORTC4, PORTC5, PORTB3, PORTB4, PORTB5};
//array of buttons 
int btnPins [9] = {PORTD2, PORTD3, PORTD4,PORTD5,PORTD6,PORTD7, PORTB0, PORTB1, PORTB2};
// set led status to zero
int ledStatus = 0; 
 // previous millis set to zero
unsigned long prevMillis = 0;
//set interval for led blink
unsigned long pause = 500;
 // Sets LEDS ON and OFF and move to the next LED
int ledCounter = 2;
//set the LEDs sweeping series to true 
bool sweepSeries = true;
//set button click to false 
bool isBtnPressed = false;
//intialize game score
int gameScore;
//set number of lives to 5
int noOfLives = 5;
//initialize number of big wins 
int noOfBigWins;
//intialize number of fails 
int noOfFails;
//set bigwin score to 5
int bigWinScore = 5;
//set up pins 
void setup(){
  //starts serial monitor 
  Serial.begin(9600);
  //Set up pin modes with Registers in Arduino
  DDRB = B00111000;
  PORTB= B00000111;
  DDRC = B00111111;
  PORTC= B00000000;
  DDRD = B00000000;
  PORTD= B11111100;
  //set up game mode to display on serial monitor 
   Serial.println("********************");
   Serial.println(String("No Of Lives: ") + String(noOfLives));
   Serial.println("********************");
}

/*
--Date: 21st January, 2021
--Purpose: This is the loop function that checks if the conditions for a win 
or a fail are true. It is the basic operation of the game
*/
void loop(){
  if(noOfLives != 0 && sweepSeries == true && counter <=8){
    sweepPattern(ledPins[counter]);
  if(ifBtnIsPressed() == true && checkBtnPresed() == btnPins[counter]){
  	 sweepSeries = false;
    _delay_ms(200);
    offLed(ledPins[counter]);
    microWinStatus();
    if(gameScore == bigWinScore){
        bigWinStatus();
    }
 }
   if(ifBtnIsPressed() == true && checkBtnPresed() != btnPins[counter]){
  	 sweepSeries = false;
     _delay_ms(200);
     offLed(ledPins[counter]);
     failStatus();   
   }  
 } //end of the wrapper if statement
  
  if (noOfLives == 0 && isBtnPressed == false ) {
      Serial.println("Game Over!");
      _delay_ms(300000);
  }
  if(isBtnPressed == false && counter > 8){
     sweepSeries = false;
     failStatus();
  }
}

/*
--Date: 21st January, 2021
--Purpose: This functions turns the led off
*/
void offLed(int ledPins){
    if(counter <= 5){
       PORTC = ~(1<<ledPins) & PORTC;  
    }else {
       PORTB = ~(1<<ledPins) & PORTB;  
    }
}

/*
--Date: 21st January, 2021
Purpose: Arduino reference is used to blink leds without delay.
the millis() function is used here to record the number of 
milliseconds the system started running, to blink the LEDs

//<-***** Arturo(2017) [1] - START
  unsigned long currentMillis = millis();

  if (currentMillis - previousMillis >= interval) {
    // save the last time you blinked the LED
    previousMillis = currentMillis;

    // if the LED is off turn it on and vice-versa:
    if (ledState == LOW) {
      ledState = HIGH;
    } else {
      ledState = LOW;
    }

    // set the LED with the ledState of the variable:
    digitalWrite(ledPin, ledState);
  }//>-*****Arturo(2017) [1] - END
  References
  [1] A. Guadalupi, "Arduino Reference," Arduino, 9 January 2017. [Online]. 
  Available: http://www.arduino.cc/en/Tutorial/BlinkWithoutDelay. 
  [Accessed 17 January 2021].

*/
void sweepPattern(int ledPins){
  unsigned long presentMillis = millis();
  if(presentMillis - prevMillis > pause){
      prevMillis = presentMillis;
    if(ledStatus == LOW){
    	ledStatus = HIGH;
      if(counter <= 5){
       PORTC = (1<<ledPins) | PORTC;  
    }else {
       PORTB = (1<<ledPins) | PORTB;  
    }
   } else{ 
      ledStatus = LOW;
     offLed(ledPins);
   }
    ledCounter--;
  }
  if(ledCounter == 0){
  	ledCounter = 2;
     counter++;
  }
}

/*
--Date: 21st January, 2021
--Purpose: This function is used to confirm if button is pressed
*/
bool ifBtnIsPressed(){
   for(int x =0; x<=8; x++){
    if(readBtnState(x, btnPins[x]) == LOW){
       isBtnPressed = true;
       break;
  }  
 }
return isBtnPressed;
}

/*
--Date: 21st January, 2021
Purpose: This to check for the button that was pressed
*/
int checkBtnPresed(){
  int btnPressed;
  for(int x =0; x<=8; x++){
    if(readBtnState(x, btnPins[x]) == LOW){   
       btnPressed = btnPins[x];
      break;
    }
  }
       return btnPressed;
}

/*
--Date: 21st January, 2021
--Purpose: This function is used to read the state of the buttons 
in the array
*/
int readBtnState(int counter, int btnPins){
   int buttonState;
  if(counter <= 5){
    buttonState = (PIND & 1<<btnPins)>> btnPins;
  } 
  else{
     buttonState = (PINB & 1<<btnPins)>> btnPins;
  }
  return buttonState;
}

/*
--Date: 21st January, 2021
Purpose: This function is used to set the Micr win status
The game speed and game score increases after every micro win 
*/
void microWinStatus(){
  microWinPattern();
  gameScore++;
  Serial.println("********************");
  Serial.println("MICRO WIN!");
  Serial.println(String("Your Score: ") + String(gameScore));
  _delay_ms(1000);
  Serial.println("Begin Next Level!");
  Serial.println("********************");
  _delay_ms(2000);
  ledCounter = 2;
  pause -= 100;
  counter = 0;
  ledStatus = 0;
  isBtnPressed = false;
  sweepSeries = true;
}

/*
--Date: 21st January, 2021
Purpose: this function is used to set the big win status
A big win is emerged after 5 micro wins. 
*/
void bigWinStatus(){
  bigWinPattern();
  gameScore = 0;
  noOfBigWins++;
  Serial.println("********************");
  Serial.println("Congrats! Big Win!");
  Serial.println(String("Number Of Big wins: ")+String(noOfBigWins));
  Serial.println("********************");
  _delay_ms(3000);
  pause = 500;
  /*Check for two consecutive big wins and add one life as a token if
   the condtion is met
  */
  if(noOfBigWins == 2){
  	noOfLives++;
    noOfBigWins = 0;
    Serial.println("Congrats! 1 Life Added!");
    Serial.println(String("Lives Left: ") + String(noOfLives));
  }
  gameScore = 0;
  counter = 0;
  sweepSeries = true;
}

/*
--Date: 21st January, 2021
Purpose: This function is used to set the fail status. 
After 3 consecutive fails, The user's lives is decreased by 1
*/
void failStatus(){
  failPattern();
  restartGame();
  Serial.println("Restart Game!");
  _delay_ms(1500);
  noOfFails++;
  noOfBigWins = 0;
  
  if(noOfFails == 3){
  	noOfLives--;
    noOfFails = 0;
    Serial.println("1 Life Lost!");
    Serial.println(String("Lives Left: ") + String(noOfLives));
  }
  counter = 0;
  sweepSeries = true;   
}

/* 
--Date: 21st January, 2021
--Purpose: This is called in the fail function to display 
the result and start the game all over again
*/
void restartGame(){
   gameScore = 0;
   ledCounter = 2;
   ledStatus = 0;
   pause = 500;
   isBtnPressed = false;
   Serial.println("********************");
   Serial.println("You Lose!");
   Serial.println(String("Your Score: ") + String(gameScore));
   Serial.println("********************");
   _delay_ms(2000);
    resetPattern();
}

/*
--Date: 21st January, 2021
--Purpose: flashing pattern for micro win
*/
void microWinPattern(){  
    PORTC = (1<<PORTC5) | PORTC;
    _delay_ms(10);
    PORTB = (1<<PORTB3) | PORTB;
    _delay_ms(10);
    PORTB = (1<<PORTB4) | PORTB;
    _delay_ms(10);
    PORTB = (1<<PORTB5) | PORTB;
    _delay_ms(10);
    PORTC = ~(1<<PORTC5) & PORTC;
    _delay_ms(10);
    PORTB = ~(1<<PORTB3) & PORTB;
    _delay_ms(10);
    PORTB = ~(1<<PORTB4) & PORTB;
    _delay_ms(10);
    PORTB = ~(1<<PORTB5) & PORTB;
    _delay_ms(10);
}

/*
--Date: 21st January, 2021
--Purpose: flashing pattern for big win 
*/
void bigWinPattern(){
   PORTC = (1<<PORTC0) | PORTC;
    _delay_ms(10);
    PORTC = (1<<PORTC1) | PORTC;
    _delay_ms(10);
    PORTC = (1<<PORTC2) | PORTC;
    _delay_ms(10);
    PORTC = (1<<PORTC3) | PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC0) & PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC1) & PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC2) & PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC3) & PORTC;
    _delay_ms(10);
   PORTC = (1<<PORTC5) | PORTC;
    _delay_ms(10);
    PORTB = (1<<PORTB3) | PORTB;
    _delay_ms(10);
    PORTB = (1<<PORTB4) | PORTB;
    _delay_ms(10);
    PORTB = (1<<PORTB5) | PORTB;
    _delay_ms(10);
    PORTC = ~(1<<PORTC5) & PORTC;
    _delay_ms(10);
    PORTB = ~(1<<PORTB3) & PORTB;
    _delay_ms(10);
    PORTB = ~(1<<PORTB4) & PORTB;
    _delay_ms(10);
    PORTB = ~(1<<PORTB5) & PORTB;
    _delay_ms(10);
    PORTC = (1<<PORTC4) | PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC4) & PORTC;    
} 

/*
--Date: 21st January, 2021
Purpose: Sets flashing pattern for fail status
*/
void failPattern(){
    PORTC = (1<<PORTC0) | PORTC;
    _delay_ms(10);
    PORTC = (1<<PORTC1) | PORTC;
    _delay_ms(10);
    PORTC = (1<<PORTC2) | PORTC;
    _delay_ms(10);
    PORTC = (1<<PORTC3) | PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC0) & PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC1) & PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC2) & PORTC;
    _delay_ms(10);
    PORTC = ~(1<<PORTC3) & PORTC;
    _delay_ms(10);
}

/*
--Date: 21st January, 2021
--Purpose: LED flashing pattern for game reset 
*/
void resetPattern(){
    PORTC = (1<<PORTC0) | PORTC;
    PORTB = (1<<PORTB5) | PORTB;
    _delay_ms(100);
    PORTC = ~(1<<PORTC0) & PORTC;
    PORTB = ~(1<<PORTB5) & PORTB;
}
