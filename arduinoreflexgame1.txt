//include the LCD from library
#include <LiquidCrystal.h>
//add lcd constructor
LiquidCrystal lcd(13,9,4,5,6,7);
//initialize pins for the tilt switch
const int flipSwitch = 3;
int flipSwitchStatus = 0;
int prevFlipSwitchStatus = 0;
int chooseLives;
//initialize lives 
int noOfLivesLeft;

int noOfBigWins;
int noOfFails;

 int beforeBigWin = 9; // shows the number of levels to bigWin
const int speakerPin = 8;
int winLedStatus;
bool sweepSeries = true;
bool btnClick = false;
int sweepCounter;
const int ledBtn = 2;
//int btnVal = 0;
int frequencyNotes[] = {500,650,800,890};
 int bigWinScore = 9;
int gameScore;
int ledPins[9] = {A0,A1, A2, A3, 12,A5, 10, 11,A4};

int ledDelay = 1200;
bool selectLives = false;
// set pin mode for switch
void setup()
{
  Serial.begin(9600);
  pinMode(ledBtn, INPUT_PULLUP);
  pinMode(A0, OUTPUT);
  pinMode(A1, OUTPUT);
  pinMode(A2, OUTPUT);
  pinMode(A3, OUTPUT);
  pinMode(12, OUTPUT);
  pinMode(A5, OUTPUT);
  pinMode(10, OUTPUT);
  pinMode(11, OUTPUT);
  pinMode(A4, OUTPUT);
  pinMode(flipSwitch, INPUT);
  attachInterrupt(digitalPinToInterrupt(2), ledIdentityBtn, FALLING);
  randomSeed(analogRead(0));
  lcd.begin(16, 2);
  lcd.print("SMART MIND!");
  lcd.setCursor(2,1);
  lcd.print("Choose Lives!");
}


void loop()
{
  
  flipSwitchStatus = digitalRead(flipSwitch); 
   if(flipSwitchStatus == LOW && selectLives == false){
      noOfLivesLeft = random(1, 4);
      selectLives = true;
      lcd.clear();
      lcd.print("Your Lives: " + String(noOfLivesLeft));
}
 
if(noOfLivesLeft == 0 && selectLives == true){
      lcd.clear();
      lcd.print("GAME OVER!");
    
}
  
if(noOfLivesLeft != 0 && selectLives == true){
    delay(1000);
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print("Level Begins!");
     _delay_ms(1000);
     
    lcd.clear();
    lcd.setCursor(0,0);
    lcd.print(beforeBigWin + String(" levels")); 
    lcd.setCursor(0,1);        
    lcd.print(String("to big win!"));
     
     delay(1500);
   
    for(sweepCounter = 0; sweepCounter <= 8; sweepCounter++){
      if(sweepSeries == true && sweepCounter <=8){     
        sweepPattern(ledPins[sweepCounter]);
      } 
      }
  
  
  if(btnClick == true && winLedStatus == 1){
      if(gameScore < bigWinScore){
      microWinStatus();      
        delay(1500);
    } 
    else if( gameScore == bigWinScore){
      bigWinStatus();  
    }     
 }
   
 if(btnClick == true && winLedStatus == 0){
      failStatus();     
  }
  
 if(btnClick == false){
       failStatus();
     } 

 } 
     
}

void ledIdentityBtn(){
  winLedStatus = digitalRead(12);
  btnClick = true;
  sweepSeries = false;  
}

void sweepPattern(int ledPins){
  digitalWrite(ledPins, HIGH);
    delay(ledDelay);
    digitalWrite(ledPins, LOW);       
}

void microWinStatus(){
  microWinPattern();
  gameScore++; 
  lcd.clear();
  lcd.print("Micro Win!");
  lcd.setCursor(0,1);
  String scoreOnLcd= String("Your Score: ") + String(gameScore);
  lcd.print(scoreOnLcd);
  delay(3000);
  lcd.clear();
  lcd.print("Next Level!");
  delay(2000);  
  sweepCounter = 0; 
  ledDelay -= 100;
  sweepSeries = 1;  
  beforeBigWin--; 
}

void bigWinStatus(){
  bigWinPattern();
  lcd.clear();
  lcd.print("Big Win!!!");
  lcd.setCursor(0,1);
  String scoreOnLcd= String("Your Score: ") + String(gameScore);
  lcd.print(scoreOnLcd);
  delay(2000);
  lcd.clear();
  lcd.print("Play Again!");
  delay(3000);
  ledDelay = 1000;
  lcd.clear();
  lcd.setCursor(0,0);
  lcd.print("New Game!");
  beforeBigWin =9;
  delay(3000);
  noOfBigWins++;
  
  if(noOfBigWins == 2){
  noOfLivesLeft++;
    noOfBigWins = 0;
    lcd.clear();
    lcd.print(String("1 life added!"));
  }
  ledDelay = 1000;
  sweepCounter = 0; 

  sweepSeries = 1;
    gameScore = 0; 
}


void failStatus(){
  failPattern();   
    restartGame();
    delay(5000);
    lcd.clear();
    lcd.print("Restart Game!");
   delay(1000);
    lcd.clear();
    noOfFails++;
    noOfBigWins = 0;  
    //noOfLivesLeft--;
    //lcd.print(String("Lives Left: ") + noOfLivesLeft );
    delay(1000);
    lcd.clear(); 
    beforeBigWin =9;
  
  if(noOfFails == 8){
    noOfLivesLeft--; 
    noOfFails = 0;
    lcd.clear();
    lcd.print(String("1 life Lost!"));
    lcd.setCursor(0,1);
    lcd.print(String("Lives Left: ") + String(noOfLivesLeft));
    delay(2000);
     lcd.clear();
  }
    sweepCounter = 0;
    sweepSeries = 1;
  
}



void restartGame(){
  gameScore = 0;
  ledDelay = 1000;
  lcd.clear();
  lcd.print("You Lose!");
  lcd.setCursor(0,1);
  String scoreOnLcd= String("Your Score: ") + String(gameScore);
  lcd.print(scoreOnLcd);
  delay(ledDelay);
}

void bigWinPattern(){
 tone(speakerPin, frequencyNotes[1]);
     digitalWrite(A0, HIGH);
     delay(10);
     digitalWrite(A1, HIGH);
     delay(10);
     digitalWrite(A2, HIGH);
     delay(10);
     digitalWrite(A3, HIGH);
     delay(10);
     digitalWrite(A0, LOW);
     delay(10);
     digitalWrite(A1, LOW);
     delay(10);
     digitalWrite(A2, LOW);
     delay(10);
     digitalWrite(A3, LOW);
     delay(10); 
     digitalWrite(A5, HIGH);
     delay(10);
     digitalWrite(10, HIGH);
     delay(10);
     digitalWrite(11, HIGH);
     delay(10);
     digitalWrite(A4, HIGH);
     delay(10);
     digitalWrite(A5, LOW);
     delay(10);
     digitalWrite(10, LOW);
     delay(10);
     digitalWrite(11, LOW);
     delay(10);
     digitalWrite(A4, LOW);
     delay(10);
     digitalWrite(12, HIGH);
     delay(10);
     digitalWrite(12, LOW);
     delay(1000);
  
  noTone(speakerPin);
    
}

void microWinPattern(){
  tone(speakerPin, frequencyNotes[2]); //activate sound
  digitalWrite(A5, HIGH);
    delay(10);
    digitalWrite(10, HIGH);
    delay(10);
    digitalWrite(11, HIGH);
    delay(10);
    digitalWrite(A4, HIGH);
    delay(10);
    digitalWrite(A5, LOW);
    delay(10);
    digitalWrite(10, LOW);
    delay(10);
    digitalWrite(11, LOW);
    delay(10);
    digitalWrite(A4, LOW);
    delay(10);
  noTone(speakerPin); // end sound
  
  
}

void failPattern(){
 tone(speakerPin, frequencyNotes[3]);
  digitalWrite(A0, HIGH);
    delay(10);
    digitalWrite(A1, HIGH);
    delay(10);
    digitalWrite(A2, HIGH);
    delay(10);
    digitalWrite(A3, HIGH);
    delay(10);
    digitalWrite(A0, LOW);
    delay(10);
    digitalWrite(A1, LOW);
    delay(10);
    digitalWrite(A2, LOW);
    delay(10);
    digitalWrite(A3, LOW);
    delay(10);
  noTone(speakerPin);
}

void resetPattern(){
 tone(speakerPin, frequencyNotes[0]);
  digitalWrite(A0, HIGH);
    delay(100);
    digitalWrite(A0, LOW);
    delay(100);
    digitalWrite(A1, HIGH);
    delay(100);
    digitalWrite(A1, LOW);
    delay(100);
    digitalWrite(A2, HIGH);
    delay(100);
    digitalWrite(A2, LOW);
    delay(100);
    digitalWrite(A3, HIGH);
    delay(100);
    digitalWrite(A3, LOW);
    delay(100);
    digitalWrite(A4, HIGH);
    delay(100); 
    digitalWrite(A4, LOW);
    delay(100);
    digitalWrite(11, HIGH);
    delay(100); 
    digitalWrite(11, LOW);
    delay(100);
    digitalWrite(10, HIGH);
    delay(100); 
    digitalWrite(10, LOW);
    delay(100);
    digitalWrite(A5, HIGH);
    delay(100); 
    digitalWrite(A5, LOW);
    delay(100);
    digitalWrite(12, HIGH);
    delay(100); 
    digitalWrite(12, LOW);
    delay(100);
  noTone(speakerPin);    
}
